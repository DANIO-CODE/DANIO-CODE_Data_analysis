import os, sys

data_dir = 'Data/fig6'
fig_dir = 'Figures/fig6'
code_dir = 'Code/fig6'
log_dir = 'Log/fig6'
panels = ['a', 'b', 'c', 'd', 'e', 'f', 'f_bottom', 'g', 'h', 'i', 'j', 'k']
targets = ['%s/fig6%s.pdf' %(fig_dir,x) for x in panels]
rscript='Rscript-4.0.1'

rule all:
    input:
        targets

rule fig6a:
    input:
        ancient('%s/projection/tad_48h_1kb_bins/tad_0017_1kb.proj' %data_dir)
    output:
        '%s/fig6a.pdf' %fig_dir
    log:
        'log/fig6a.log'
    params:
        cmd='%s %s/fig6a.R' %(rscript,code_dir)
    shell:
        '''
        ### Runtime ~ 20 sec ###
        {params.cmd} {input} &> {log}
        '''

rule fig6b:
    input:
        [ancient('%s/projection/tad_48h_1kb_bins/tad_%04d_1kb.proj' %(data_dir,i)) for i in range(1,1001)]
    output:
        '%s/fig6b.pdf' %fig_dir
    log:
        'log/fig6b.log'
    params:
        cmd='%s %s/fig6b.R' %(rscript,code_dir)
    shell:
        '''
        ### Runtime ~ 35 sec ###
        {params.cmd} {input} &> {log}
        '''

rule fig6c:
    input:
        proj=ancient('%s/projection/tad_48h_1kb_bins/tad_0017_1kb.proj' %data_dir),
        bw_zf=ancient('%s/bigwig/H3K27me3_danRer10_prim5.cpm.200bp.1kb_bins.bw' %data_dir),
        bw_mmOnZfCoords=ancient('%s/bigwig/H3K27me3_mm10_multiTissue_E10.5.cpm.200bp.1kb_bins.on_danRer10_multi.bw' %data_dir)
    output:
        '%s/fig6c.pdf' %fig_dir
    log:
        'log/fig6c.log'
    params:
        cmd='%s %s/fig6c.R' %(rscript,code_dir)
    shell:
        '''
        ### Runtime ~ 35 sec ###
        {params.cmd} {input} &> {log}
        '''

rule fig6de:
    input:
        tads=ancient('%s/TADs/tads_top1000_CNEdensity.bed' %data_dir),
        countdata_quantiles_zf=ancient('%s/countdata_quantiles_zf_tads.csv' %data_dir),
        proj=[ancient('%s/projection/tad_48h_1kb_bins/tad_%04d_1kb.proj' %(data_dir,i)) for i in range(1,1001)]
    output:
        fig6d='%s/fig6d.pdf' %fig_dir,
        fig6e='%s/fig6e.pdf' %fig_dir
    log:
        'log/fig6de.log'
    params:
        cmd='%s %s/fig6de.R' %(rscript,code_dir)
    shell:
        '''
        ### Runtime ~ 4 mins ###
        {params.cmd} {input.tads} {input.countdata_quantiles_zf} &> {log}
        '''

rule fig6f:
    input:
        proj=ancient('%s/projection/tad_48h_1kb_bins/tad_0017_1kb.proj' %data_dir),
        atac_zf=ancient('%s/bed/ATAC_danRer10_prim5_summits.bed' %data_dir),
        dnase_mm_projOnZf=ancient('%s/projection/DNase_mm10_multiTissue_E10.5_summits.proj' %data_dir)
    output:
        '%s/fig6f.pdf' %fig_dir
    log:
        'log/fig6f.log'
    params:
        cmd='%s %s/fig6f.R' %(rscript,code_dir)
    shell:
        '''
        ### Runtime ~ 1.5 mins ###
        {params.cmd} {input} &> {log}
        '''

rule fig6g:
    input:
        atac_proj=ancient('%s/projection/ATAC_danRer10_prim5_summits.inTAD.proj' %data_dir), ### how is this file created? (may have to rename it to ATAC_danRer10_prim5_summits_inTAD.proj / .bed). check ipynb and create a rule
        aln=ancient('%s/alignment/danRer10.mm10.net.axt.bed' %data_dir),
        dnase_mm=ancient('%s/bigwig/DNase_mm10_multiTissue_E10.5.cpm.200bp.bw' %data_dir)
    output:
        fig6f_bottom='%s/fig6f_bottom.pdf' %fig_dir,
        fig6g='%s/fig6g.pdf' %fig_dir
    log:
        'log/fig6g.log'
    params:
        cmd='%s %s/fig6g.R' %(rscript,code_dir)
    shell:
        '''
        ### Runtime ~ 40 sec ###
        {params.cmd} {input} &> {log}
        '''

rule fig6h:
    input:
        chromhmm_mm=ancient('%s/chromHMM/mm10/chromHMM_out/multiTissue_10_dense.bed' %data_dir),
        atac_zf=ancient('%s/projection/ATAC_danRer10_prim5_summits.inTAD.proj' %data_dir),
        aln=ancient('%s/alignment/danRer10.mm10.net.axt.bed' %data_dir),
        chromhmm_zf=ancient('%s/chromHMM/danRer10/prim5_chromHMM.bed' %data_dir)
    output:
        '%s/fig6h.pdf' %fig_dir
    log:
        'log/fig6h.log'
    params:
        cmd='%s %s/fig6h.R' %(rscript,code_dir)
    shell:
        '''
        ### Runtime ~ 1 min ###
        {params.cmd} {input} &> {log}
        '''

rule fig6i:
    input:
        wm=ancient('%s/motif/weight_matrices.txt' %data_dir),
        dnase_mm=ancient('%s/bed/DNase_mm10_multiTissue_E10.5_summits.bed' %data_dir),
        atac_zf=ancient('%s/projection/ATAC_danRer10_prim5_summits.inTAD.proj' %data_dir),
        tads=ancient('%s/TADs/total.NcoI.domains' %data_dir),
        aln=ancient('%s/alignment/danRer10.mm10.net.axt.bed' %data_dir)
    output:
        '%s/fig6i.pdf' %fig_dir
    log:
        'log/fig6i.log'
    params:
        cmd='%s %s/fig6i.R' %(rscript,code_dir)
    shell:
        '''
        ### Runtime ~ 18 mins ###
        {params.cmd} {input} &> {log}
        '''
        
rule fig6jk:
    input:
        se=ancient('%s/bed/dome_Gateway_SuperEnhancers.bed' %data_dir),
        tads=ancient('%s/TADs/grb_tads_with_ensembles.bed' %data_dir),
        k27ac_zf=ancient('%s/bigwig/H3K27ac_danRer10_dome.cpm.200bp.bw' %data_dir),
        k27ac_mm=ancient('%s/bigwig/H3K27ac_mm10_ESC.cpm.200bp.bw' %data_dir),
        sizes_zf=ancient('%s/assembly/danRer10.sizes' %data_dir),
        sizes_mm=ancient('%s/assembly/mm10.sizes' %data_dir),
        aln=ancient('%s/alignment/danRer10.mm10.net.axt.bed' %data_dir),
        proj_files=[ancient('%s/projection/tad_ESC_1kb_bins/tad_%03d_1kb.proj' %(data_dir,i)) for i in range(1,259)]
    output:
        fig6j='%s/fig6j.pdf' %fig_dir,
        fig6k='%s/fig6k.pdf' %fig_dir
    log:
        'log/fig6jk.log'
    params:
        cmd='%s %s/fig6jk.R' %(rscript,code_dir)
    shell:
        '''
        ### Runtime ~ 2 mins ###
        {params.cmd} {input.se} {input.tads} {input.k27ac_zf} {input.k27ac_mm} {input.sizes_zf} {input.sizes_mm} {input.aln} &> {log}
        '''

rule get_tad_coordinates:
    input:
        ancient('%s/TADs/tads_top1000_CNEdensity.bed' %data_dir)
    output:
        temp('{proj_dir}/{tad_id}_1kb.bed')
    shell:
        'grep {wildcards.tad_id} {input} > {output}'
        
rule project_grb:
    input:
        tad_bed='{data_dir}/projection/{tad_dir}/{tad_id}_1kb.bed',
        pwaln=ancient('{data_dir}/alignment/pkl/danRer10.mm10.pwaln.pkl')
    output:
        proj='{data_dir}/projection/{tad_dir,[tad].*}/{tad_id}_1kb.proj'
    threads:
        min(workflow.cores, 50)
    params:
         reference='danRer10',
         target='mm10',
         binsize=1000,
         distance_half_life=10000,
         outdir=lambda wc: '%s/projection/tad_48h_1kb_bins' %wc.data_dir
    shell:
        '%s/project_grb.sh {input.tad_bed} {params.reference} {params.target} {params.binsize} {params.distance_half_life} {input.pwaln} {params.outdir} {threads}' %code_dir

rule unpack_pwaln_pkl:
    input:
        '{basename}.pwaln.pkl.gz'
    output:
        '{basename}.pwaln.pkl'
    shell:
        'gzip -dc {input} > {output}'

rule quantile_normalize_and_map_bigwigs:
    input:
        sizes_zf=ancient('%s/assembly/danRer10.sizes' %data_dir),
        sizes_mm=ancient('%s/assembly/mm10.sizes' %data_dir),
        k27me3_zf=ancient('%s/bigwig/H3K27me3_danRer10_prim5.cpm.200bp.bw' %data_dir),
        k27ac_zf=ancient('%s/bigwig/H3K27ac_danRer10_dome.cpm.200bp.bw' %data_dir),
        k27me3_mm=ancient('%s/bigwig/H3K27me3_mm10_multiTissue_E10.5.cpm.200bp.bw' %data_dir),
        k27ac_mm=ancient('%s/bigwig/H3K27ac_mm10_ESC.cpm.200bp.bw' %data_dir)
    output:
        countdata_quantiles_zf='%s/countdata_quantiles_zf_tads.csv' %data_dir,
        k27me3_zf='%s/bigwig/H3K27me3_danRer10_prim5.cpm.200bp.1kb_bins.bw' %data_dir,
        k27ac_zf='%s/bigwig/H3K27ac_danRer10_dome.cpm.200bp.1kb_bins.bw' %data_dir,
        k27me3_mm='%s/bigwig/H3K27me3_mm10_multiTissue_E10.5.cpm.200bp.1kb_bins.on_danRer10_multi.bw' %data_dir,
        k27ac_mm='%s/bigwig/H3K27ac_mm10_ESC.cpm.200bp.1kb_bins.on_danRer10_multi.bw' %data_dir
    params:
        cmd='%s %s/quantile_normalize_and_map_bigwigs.R' %(rscript,code_dir)
    threads:
        min(workflow.cores, 50)
    shell:
        '''
        ### Runtime ~ 2 mins ###
        {params.cmd} {threads} {input} {output.countdata_quantiles_zf}
        '''
        
rule call_peaks:
    input:
        ancient('%s/bam/{feature}_{build}_{stage}.bam' %data_dir)
    output:
        '{bed_dir}/{feature,((?!_).)*}_{build,((?!_).)*}_{stage}_summits.bed'
    threads:
        min(workflow.cores, 50)
    params:
        genome_size=lambda wc: {'danRer10': '1.34e+9', 'mm10': 'mm'}[wc.build]
    shell:
        'macs2 callpeak -t {input} -g {params.genome_size} -n {wildcards.feature}_{wildcards.build}_{wildcards.stage} --outdir {wildcards.bed_dir}'

def get_build(basename, which='reference'):
    # function to recognize species build in the basename of a file and return that or the 'opposite' in case the target build is desired.
    if 'danRer10' in basename:
        return {'reference':'danRer10', 'target':'mm10'}[which]
    elif 'mm10' in basename:
        return {'reference':'mm10', 'target':'danRer10'}[which]
    else:
        raise ValueError('basename must contain either "danRer10" or "mm10".')
        
rule project_regions:
    input:
        bed=ancient('{data_dir}/bed/{basename}.bed'),
        pwaln=('{data_dir}/alignment/pkl/danRer10.mm10.pwaln.pkl')
    output:
        '{data_dir}/projection/{basename,((?!\/).)*}.proj'
    threads:
        min(workflow.cores, 50)
    params:
        reference=lambda wc: get_build(wc.basename, which='reference'),
        target=lambda wc: get_build(wc.basename, which='target'),
        half_life_distance=10000
    shell:
        '%s/project_regions.sh {input.bed} {params.reference} {params.target} {params.half_life_distance} {threads} {wildcards.data_dir}/{wildcards.data_dir}/projection/ {input.pwaln}' %code_dir
        
rule get_atac_peaks_in_TADs:
    input:
        atac_peaks='{data_dir}/bed/ATAC_danRer10_prim5_summits.bed',
        tads='{data_dir}/TADs/Zebrafish_48hpf_TADs.GRCz10.bed'
    output:
        '{data_dir}/bed/ATAC_danRer10_prim5_summits.inTAD.bed'
    params:
        cmd='%s %s/atac_peaks_in_TADs.R' %(rscript,code_dir)
    shell:
        '{params.cmd} {input} {output}'

def get_center_reads_flag(basename):
    # function to determine whether reads are to be centered (ChIP-seq) or not (DNase-seq) during bam to bigwig conversion
    if 'DNase' in basename:
        return ''
    else:
        return '--centerReads'
        
rule bam_to_bigwig:
    input:
        '{data_dir}/bam/{basename}.bam'
    output:
        '{data_dir}/bigwig/{basename}.cpm.200bp.bw'
    params:
        center_reads_flag=lambda wc: get_center_reads_flag(wc.basename)
    threads:
        min(workflow.cores, 10)
    shell:
        'bamCoverage --binSize 200 --normalizeUsing CPM {params.center_reads_flag} --minMappingQuality 30 -p {threads} -b {input} -o {output}'

rule download_zebrafish_data:
    output:
        h3k27me3='{bam_dir}/H3K27me3_danRer10_prim5.bam',
        h3k27ac='{bam_dir}/H3K27ac_danRer10_dome.bam',
        atac='{bam_dir}/ATAC_danRer10_prim5.bam'
    shell:
        '%s/download_and_process_zebrafish_data.sh' %code_dir

rule download_mouse_data:
    # The H3K27ac data was downloaded from GEO (SRR7895937, SRR7895938) and processed according to the ENCODE guidelines. For convenience we providce the processed bam files.
    output:
        h3k27me3='{bam_dir}/H3K27me3_mm10_multiTissue_E10.5.bam',
        dnase='{bam_dir}/DNase_mm10_multiTissue_E10.5.bam'
    shell:
        '%s/download_and_process_mouse_data.sh' %code_dir

### CONTINUE HERE: ChromHMM
rule chromhmm:
    input:
    output:
        '{chromhmm_dir}/danRer10/prim5_chromHMM.bed',
        '{chromhmm_dir}/mm10/chromHMM_out/multiTissue_10_dense.bed'
    threads:
        min(workflow.cores, 30)
    shell:
        ''
